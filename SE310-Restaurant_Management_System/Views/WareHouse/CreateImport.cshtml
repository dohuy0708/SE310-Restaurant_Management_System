@model IEnumerable<Ingredient>
@{
    ViewData["Title"] = "CreateImport";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<div class="card-body">
    <h4 class="card-title">ĐƠN NHẬP KHO</h4>
    <form class="form-sample" id="purchaseOrderForm">
        <div class="row">
            <div class="col-md-6">
                <div class="form-group row">
                    <label class="col-sm-3 col-form-label">Mã đơn</label>
                    <div class="col-sm-9">
                        <input type="text" class="form-control" id="OrderCode" name="OrderCode" readonly value="@ViewBag.ID">
                    </div>
                </div>
            </div>
            <div class="col-md-6">
                <div class="form-group row">
                    <label class="col-sm-3 col-form-label">Ngày Nhập</label>
                    <div class="col-sm-9">
                        <input type="date" class="form-control" id="OrderDate" name="OrderDate" readonly value="@ViewBag.Date">
                    </div>
                </div>
            </div>
        </div>

        <div class="form-group row">
            <label class="col-sm-3 col-form-label">Mô tả</label>
            <div class="col-sm-9">
                <textarea class="form-control" id="Description" name="Description" rows="2"></textarea>
            </div>
        </div>

        <!-- Bảng Danh Sách Nguyên Liệu -->
        <table class="table table-bordered" id="ingredientTable">
            <thead>
                <tr>
                    <th>Tên Nguyên Liệu</th>
                    <th>Đơn Vị Tính</th>
                    <th>Đơn Giá</th>
                    <th>Số Lượng</th>
                    <th>Thành Tiền</th>
                    <th></th>
                </tr>
            </thead>
            <tbody>
                <!-- Dòng nguyên liệu sẽ được thêm vào đây -->
            </tbody>
        </table>

        <button type="button" class="btn btn-success mb-3" onclick="addIngredientRow()">Thêm Nguyên Liệu</button>

        <!-- Tổng tiền -->
        <div class="form-group row">
            <label class="col-sm-3 col-form-label font-weight-bold">Tổng Tiền</label>
            <div class="col-sm-9">
                <input type="text" class="form-control font-weight-bold" id="TotalAmount" readonly style="background-color: #f8f9fa; border-color: #007bff; color: #007bff;">
                <span style="font-weight: bold; color: #007bff;"> VND</span>
            </div>
        </div>

        <div class="d-flex justify-content-between">
            <button type="button" class="btn btn-secondary" onclick="goBack()">Quay Lại</button>
            <button type="button" class="btn btn-primary" onclick="submitOrder()">Tạo Đơn</button>
        </div>
    </form>
</div>

<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
<script>
    const ingredients = [];

    @foreach (var ingredient in Model)
    {
        <text>
                ingredients.push({
                    id: @ingredient.IngredientId,
                name: '@ingredient.IngredientName',
                unit: '@ingredient.Unit'
                        });
        </text>
    }

        function addIngredientRow() {
            const newRow = `
                <tr>
                    <td>
                        <select class="form-control ingredient-select" onchange="updateUnit(this)">
                            <option value="">Chọn nguyên liệu</option>
                            ${ingredients.map(ingredient => `
                                <option value="${ingredient.id}" data-unit="${ingredient.unit}">${ingredient.name}</option>
                            `).join('')}
                        </select>
                    </td>
                    <td><input type="text" class="form-control unit" readonly></td>
                    <td><input type="number" class="form-control price" placeholder="Đơn giá" required onchange="calculateTotal(this)"></td>
                    <td><input type="number" class="form-control quantity" placeholder="Số lượng" required onchange="calculateTotal(this)"></td>
                    <td><input type="text" class="form-control total" readonly></td>
                    <td><button type="button" class="btn btn-danger" onclick="removeIngredientRow(this)">Xóa</button></td>
                </tr>`;
            $('#ingredientTable tbody').append(newRow);
        }

    function updateUnit(select) {
        const unit = $(select).find('option:selected').data('unit');
        $(select).closest('tr').find('.unit').val(unit);
    }

    function calculateTotal(element) {
        const row = $(element).closest('tr');
        const price = parseFloat(row.find('.price').val()) || 0;
        const quantity = parseFloat(row.find('.quantity').val()) || 0;
        const total = price * quantity;
        row.find('.total').val(total);
        updateGrandTotal();
    }

    function updateGrandTotal() {
        let grandTotal = 0;
        $('#ingredientTable .total').each(function () {
            grandTotal += parseFloat($(this).val()) || 0;
        });
        $('#TotalAmount').val(grandTotal);
    }

    function removeIngredientRow(button) {
        $(button).closest('tr').remove();
        updateGrandTotal();
    }

    function validateForm() {
        let valid = true;
        $('#ingredientTable tbody tr').each(function () {
            const ingredientSelect = $(this).find('.ingredient-select').val();
            const price = $(this).find('.price').val();
            const quantity = $(this).find('.quantity').val();
            if (!ingredientSelect || !price || !quantity) {
                valid = false;
                return false; // Break the loop
            }
        });
        return valid;
    }

    function submitOrder() {
        if (!validateForm()) {
            alert("Vui lòng điền đầy đủ thông tin cho tất cả các nguyên liệu.");
            return;
        }

        const entryDetails = [];
        $('#ingredientTable tbody tr').each(function () {
            const ingredientId = $(this).find('.ingredient-select').val();
            const importPrice = parseFloat($(this).find('.price').val()) || 0;
            const quantity = parseInt($(this).find('.quantity').val()) || 0;
            const unit = $(this).find('.unit').val();
            if (ingredientId && importPrice && quantity) {
                entryDetails.push({
                    IngredientId: parseInt(ingredientId),
                    IngredientName:"",
                    Unit: unit,
                    Quantity: quantity,
                    ImportPrice: importPrice
                });
            }
        });

        const data = {
            EntryId: parseInt($('#OrderCode').val()),
            EntryDate: $('#OrderDate').val(), // Thêm ngày nhập
            Description: $('#Description').val(),
            TotalPrice: 1000.00,
            EntryDetails: entryDetails
        };
        console.log("Data to action", data);

        $.ajax({
            type: 'POST',
            url: '@Url.Action("CreateImport", "WareHouse")',
            data: JSON.stringify(data),
            contentType: 'application/json',
            success: function (response) {
                alert("Đơn nhập kho đã được tạo thành công.");
                window.location.href = '@Url.Action("Import", "WareHouse")';
            },
            error: function (jqXHR, textStatus, errorThrown) {
                console.error("AJAX error:", jqXHR);
                alert("Đã xảy ra lỗi khi tạo đơn nhập kho: " + errorThrown);
            }
        });
    }

    function goBack() {
        window.history.back();
    }
</script>
